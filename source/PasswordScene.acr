import Graphics2D;

public class PasswordScene : LegacyAbstractScene {

	private static List<string> PASSWORD_BLOCK = new List<string>() {
		'123456789',
		'0ABCDEFGH',
		'IJKLMNOPQ',
		'RSTUVWXYZ'
	};

	private stirng flags = '';
	private int row = 0;
	private int col = 0;
	private int blinkCounter = 0;
	private string current = '';
	
	constructor() : base() { }
	
	public void processInput(List<MyEvent> events, Dictionary<string, bool> pressed) {
		int width = PasswordScene.PASSWORD_BLOCK[0].length;
		int height = PasswordScene.PASSWORD_BLOCK.length;
		
		for (MyEvent event : events) {
			int dx = 0;
			int dy = 0;
			if (event.down) {
				if (event.action == 'up') dy--;
				else if (event.action == 'down') dy++;
				else if (event.action == 'left') dx--;
				else if (event.action == 'right') dx++;
				else if (event.action == 'A' || event.action == 'start') {
					if (this.row == 4 && this.col >= 5) {
						this.next = new TitleScene();
					} else if (this.row == 4) {
						this.tryCommit();
					} else if (this.current.length == 4) {
						playNoise('head_bonk');
					} else if (this.row < 4) {
						if (this.current.length == 4) {
							playNoise('head_bonk');
						} else {
							playNoise('password_enter_digit');
							this.current += PasswordScene.PASSWORD_BLOCK[this.row][this.col];
						}
					}
				} else if (event.action == 'B') {
					if (this.current.length > 0) {
						this.current = this.current[:-1];
					} else {
						playNoise('head_bonk');
					}
				}
			}
			
			int newCol = this.col + dx;
			int newRow = this.row + dy;
			if (dx != 0 || dy != 0) {
				bool bonk = false;
				if (this.row == 4) {
					if (dy == -1) {
						// allow
					} else if (dy == 1) {
						bonk = true;
					} else if (dx == -1) {
						if (this.col >= 5) {
							newCol = 0;
						} else {
							bonk = true;
						}
					} else if (dx == 1) {
						if (this.col < 5) {
							newCol = 6;
						} else {
							bonk = true;
						}
					}
				} else {
					if (newCol < 0 || newRow < 0) {
						bonk = true;
					}
					if (newCol >= width) {
						bonk = true;
					}
				}
				if (!bonk) {
					this.col = newCol;
					this.row = newRow;
					playNoise('menu_move');
				} else {
					playNoise('head_bonk');
				}
			}
		}
	}
	
	public void tryCommit() {
		if (this.current.length != 4) {
			playNoise('bad_password');
			return;
		}
		
		for (int i : new List<int>() { 0, 1, 3 }) {
			if (!(ALPHABET.contains(this.current[i]))) {
				playNoise('bad_password');
				return;
			}
		}
		
		if (!('0123456789'.contains(this.current[2]))) {
			playNoise('bad_password');
			return;
		}
		
		Context context = new Context();
		context.convertFromPassword(this.current);
		
		this.next = new PlayScene('ship_1', 8, 9, context);
	}
	
	public void update() {
		this.blinkCounter++;
		JukeBox.ensureSong('password');
	}

	public List<int> getCoord(int col, int row) {
		return new List<int>() { 8 + col * 24 + 24, 64 + row * 16 };
	}
	
	public void render(int rc) {
		Graphics2D.Draw.fill(0, 0, 0);
		
		int hleft = 48;
		drawBox(hleft, 0, 18, 5);
		drawText(255, 255, 255, "Password Entry", hleft + 16, 16);
		
		int gleft = 8;
		int gtop = 48;
		drawBox(gleft, gtop, 30, 13);
		List<string> pb = PasswordScene.PASSWORD_BLOCK;
		bool blink = this.blinkCounter % 16 < 8;
		int height = pb.length;
		int width = pb[0].length;
		int y;
		int x;
		for (y = 0; y < height; ++y) {
			for (x = 0; x < width; ++x) {
				string c = this.getCoord(x, y);
				drawText(255, 255, 255, pb[y][x], c[0], c[1]); // (gleft + 24 + x * 24, gtop + 16 + y * 16)
				if (this.col == x && this.row == y) {
					if (blink) {
						drawText(255, 255, 255, '>', c[0] - 8, c[1]);
					}
				}
			}
		}
		
		x = 0;
		y = 4;
		int px = gleft + 24 + x * 24;
		int py = gtop + 16 + y * 16;
		drawText(255, 255, 255, 'DONE', px, py);
		if (this.row == 4 && this.col < 5 && blink) {
			drawText(255, 255, 255, '>', px - 8, py);
		}
		x = 6;
		px = gleft + 24 + x * 24;
		drawText(255, 255, 255, 'CANCEL', px, py);
		if (this.row == 4 && this.col >= 5 && blink) {
			drawText(255, 255, 255, '>', px - 8, py);
		}
		
		int oleft = 88;
		int otop = 224 - 64;
		drawBox(oleft, otop, 8, 5);
		drawText(255, 255, 255, this.current, oleft + 16, otop + 16);
	}
}
