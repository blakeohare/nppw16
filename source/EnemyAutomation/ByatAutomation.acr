import Math;
import Random;

class ByatAutomation {
	field sprite;
	field counter = 0;
	field mode = 'perch'; // TODO: replace with enum.
	field perched = true;
	field dropHeight = 10;
	field targetY;
	field swoopLeft;

	constructor(sprite) {
		this.sprite = sprite;
	}
		
	function doStuff(scene) {
		this.counter++;
		sprite = this.sprite;
		tiles = scene.tiles;
		
		if (this.mode == 'perch') {
			this.perched = true;
			if (this.counter > 3 * 30) {
				this.counter = 0;
				this.mode = 'down';
				this.perched = false;
				dropHeight = Random.randomInt(1, 6) * 16;
				this.targetY = sprite.y + dropHeight;
				//this.originalY = sprite.y;
			}
		} else if (this.mode == 'down') {
			sprite.dy = 2;
			if (sprite.y >= this.targetY || sprite.collidedWall || sprite.onGround) {
				this.mode = 'swoop';
				this.counter = 0;
				this.swoopLeft = scene.player.x < sprite.x;
			}
		} else if (this.mode == 'swoop') {
			swoopSpeed = 1.6;
			sprite.dy = Math.sin(this.counter * 40 / (2 * 3.14159)) * 4;
			sprite.dx = this.swoopLeft ? -swoopSpeed : swoopSpeed;
			if (this.counter > 30 * 6) {
				this.mode = 'up';
				this.counter = 0;
			} else if (sprite.collidedWall) {
				this.swoopLeft = !this.swoopLeft;
			}
		} else if (this.mode == 'up') {
			sprite.dy = -3.5;
			mt = sprite.x & 15;
			if (mt < 4) {
				sprite.dx = 1;
			} else if (mt > 12) {
				sprite.dx = -1;
			}
			stop = false;
			if (this.sprite.collidedWall) {
				stop = true;
			} else {
				tx = sprite.x / 16;
				ty = (sprite.y - 8) / 16;
				if (tx < 0 || tx >= scene.cols || ty < 0 || ty >= scene.rows) {
					stop = true;
				} else {
					t = tiles[tx][ty];
					if (t.isTop || t.solid) {
						stop = true;
					}
				}
			}
			
			if (stop) {
				this.mode = 'perch';
				this.counter = 0;
			}
		}
	}
}
