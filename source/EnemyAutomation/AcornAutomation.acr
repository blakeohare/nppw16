import Math;
import Random;

const float ACORN_SPEED = 1.5;
const int ACORN_DELAY_FOR_TOP_THROWING = 5 * 30;

class AcornAutomation : AbstractAutomation {
	private int countdown;
	// TODO: replace with enum
	private string mode = 'patrolling'; // patrolling | throwing | baldpatrolling
	private Sprite top = null;
	private bool walkingLeft = true;
	
	constructor(Sprite sprite) : base(sprite) {
		this.countdown = (int) Random.randomInt(ACORN_DELAY_FOR_TOP_THROWING);
	}
	
	public override void doStuff(PlayScene scene) {
		this.countdown--;
		bool walk = false;
		AcornTopAutomation ata = (AcornTopAutomation) this.top.automation;
		if (this.mode == 'patrolling') {
			if (this.countdown <= 0) {
				this.mode = 'throwing';
				this.top = new Sprite('acorntop', this.sprite.x, this.sprite.y);
				this.top.acorntopdir = this.sprite.lastDirection;
				this.top.goLeft = this.top.acorntopdir == 'left';
				ata.setGoLeft(this.sprite.lastDirection == 'left');
				ata.setGoUp(this.sprite.y > scene.player.y);
				//this.top.automation.body = this.sprite;
				this.top.deleteWhenOffScreen = true;
				this.top.ghost = true;
				this.top.floats = true;
				this.sprite.spawns = new List<Sprite>() { this.top };
			} else {
				walk = true;
			}
		} else if (this.mode == 'throwing') {
			if (this.top.dead) {
				this.mode = 'baldpatrolling';
			} else if (ata.completed) {
				this.mode = 'patrolling';
				this.top.dead = true;
				this.countdown = ACORN_DELAY_FOR_TOP_THROWING;
			}
		} else if (this.mode == 'baldpatrolling') {
			walk = true;
		}
		
		if (walk) {
			if (this.sprite.collidedWall) {
				this.walkingLeft = !this.walkingLeft;
			}
			
			List<List<Tile>> tiles = scene.tiles;
			int cols = scene.cols;
			int rows = scene.rows;
			float dx = this.walkingLeft ? ACORN_SPEED : -ACORN_SPEED; // TODO: isn't this backwards?
			int oldTileX = (int) Math.floor(this.sprite.modelX / 16);
			float newX = this.sprite.modelX + dx;
			int oldTileY = (int) Math.floor(this.sprite.modelY / 16);
			int newTileX = (int) Math.floor(newX / 16);
			if (newTileX < 0 || newTileX >= cols) {
				this.walkingLeft = !this.walkingLeft;
				return;
			}
			
			int belowTileY = oldTileY + 1;
			
			if (newTileX == oldTileX) {
				this.sprite.dx = dx;
			} else {
				if (belowTileY < 0 || belowTileY >= rows) {
					// TODO: remove this? why was this if statement here?
				}
				Tile t = tiles[newTileX][belowTileY];
				if (!t.solid && !t.isTop) {
					this.walkingLeft = !this.walkingLeft;
				} else {
					this.sprite.dx = dx;
				}
			}
			
			// TODO: walk back and forth, but don't fall off.
		}
	}
}
