class JoystickConfigScreen {
	constructor(js_index, bg) {
		this.bg = bg;
		this.bg.next = this.bg;
		this.js_index = js_index;
		this.next = this;
		this.flags = '';
		this.buttons = 'left right up down A B start'.split(' ');
		this.phase = 0;
		this.configs_taken = {};
		this.config = {};
	}
	
	function processInput(events, pressed) { }
	
	function update() {
		if (this.phase < this.buttons.length) {
			if (this.do_poll()) {
				this.phase++;
			}
		}
		
		if (this.phase == this.buttons.length) {
			name = joystick_instances[this.js_index].get_name();
			cached_joysticks[name] = this.config;
			set_active_joystick(name);
			serialize_joystick_config();
			this.next = new TitleScene();
		}
	}
	
	function do_poll() {
		button = this.buttons[this.phase];
		js = joystick_instances[this.js_index];
		
		for (i = 0; i < js.get_numbuttons(); ++i) {
			if (js.get_button(i)) {
				key = 'B' + i;
				if (!this.configs_taken.get(key, false)) {
					this.configs_taken[key] = true;
					this.config[button] = ['B', i];
					return true;
				}
			}
		}
		
		for (i = 0; i < js.get_numaxes(); ++i) {
			value = js.get_axis(i);
			if (value > 0.5) {
				key = "A" + i + '+';
				if (!this.configs_taken.get(key, false)) {
					this.configs_taken[key] = true;
					this.config[button] = ['A', i, true];
					return true;
				}
			} else if (value < -0.5) {
				key = "A" + i + '-';
				if (!this.configs_taken.get(key, false)) {
					this.configs_taken[key] = true;
					this.config[button] = ['A', i, false];
					return true;
				}
			}
		}
		
		for (i = 0; i < js.get_numhats(); ++i) {
			value = js.get_hat(i);
			for (j : [0, 1]) {
				if (value[j] == 1) {
					key = 'H' + i + "|" + j + "+";
					if (!this.configs_taken.get(key, false)) {
						this.configs_taken[key] = true;
						this.config[button] = ['H', i, j, true];
						return true;
					}
				} else if (value[j] == -1) {
					key = 'H' + i + "|" + j + '-';
					if (!this.configs_taken.get(key, false)) {
						this.configs_taken[key] = true;
						this.config[button] = ['H', i, j, false];
						return true;
					}
				}
			}
		}
		return false;
	}
	
	function render(rc) {
		this.bg.render(rc);
		drawBox(40, 64, 20, 15);
		
		if (this.phase < this.buttons.length) {
			button = this.buttons[this.phase];
			drawText(255, 255, 255, "Press " + button, 40 + 16, 64 + 16);
			img_name = button.lower();
			if (((rc / 6) % 2) == 0)
				img_name = 'none';
			$gfx_blit_image(IMAGES.get('misc/nes_' + img_name + '.png'), 40 + 16, 64 + 32);
		}
	}
}
