import Random;

const FULL_LIFE = 10;
const START_LIFE = 10;
const START_LIVES = 3;

const ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

class Context {

	field lifemeter = START_LIFE;
	field lives = START_LIVES;
	field volcanoA = false;
	field volcanoB = false;
	field volcanoC = false;
	field balloonA = false;
	field balloonB = false;
	field balloonC = false;
	field balloonD = false;
	field gravity = false;
	field transmission1 = false;
	field transmission2 = false;
	field transmission3 = false;
	field transmission4 = false;
	field powerupsTaken = {};
	
	constructor() { }
	
	function convertToPassword() {
		
		if (this.balloonA || this.balloonB || this.balloonC || this.balloonD)
			count = 3;
		else if (this.volcanoA || this.volcanoB || this.volcanoC)
			count = 2;
		else if (this.gravity)
			count = 1;
		else
			count = 0;
		
		password = '';
		
		if (count == 1)
			password = 'A';
		else if (count == 2)
			password = 'B';
		else if (count == 3)
			password = 'C';
		else
			password = this.randomChar(ALPHABET[3:]);
		
		if (count >= 1) {
			if (this.gravity)
				password += this.randomChar(ALPHABET[:13]);
			else
				password += this.randomChar(ALPHABET[13:]);
		} else {
			password += this.randomChar(ALPHABET);
		}
		
		if (count >= 2) {
			value = (this.volcanoA ? 1 : 0) + (this.volcanoB ? 2 : 0) + (this.volcanoC ? 4 : 0);
			letter = Core.chr(Core.ord('1') + value - 1);
			password += letter;
		} else {
			password += this.randomChar('0123456789');
		}
		
		if (count >= 3) {
			value = (this.balloonA ? 1 : 0) + (this.balloonB ? 2 : 0) + (this.balloonC ? 4 : 0) + (this.balloonD ? 8 : 0);
			letter = Core.chr(Core.ord('A') + value - 1);
			password += letter;
		} else {
			password += this.randomChar(ALPHABET);
		}
		
		return password;
	}
	
	/*
	First letter:
	A - 2nd letter is password, 3rd and 4th are random
	B - 2nd and 3rd letter are password, 4th is random
	C - All 3 are used
	D+ - password is random, no state
	
	Second letter when not random
	<= M - gravity is on
	>= N - gravity is off
	
	Third letter when not random
	1 - volcanos 1, 0, 0
	2 - volcanos 0, 1, 0
	3 - volcanos 1, 1, 0
	4 - volcanos 0, 0, 1
	5 - volcanos 1, 0, 1
	6 - volcanos 0, 1, 1
	7 - volcanos 1, 1, 1
	>= 8 - volcanos 0, 0, 0
	
	Fourth letter when not random
	same pattern for volcanos, but for water, also uses letters instead of numbers
	*/
	
	function randomChar(characters) {
		return characters[Random.randomInt(characters.length)];
	}
	
	function enforceLetter(letter) {
		letter = letter.upper();
		if (Core.ord(letter) < Core.ord('A'))
			return 'A';
		if (Core.ord(letter) > Core.ord('Z'))
			return 'Z';
		return letter;
	}
	
	function enforceNumber(char) {
		if (Core.ord(char) < Core.ord('0'))
			return '0';
		if (Core.ord(char) > Core.ord('9'))
			return '9';
		return char;
	}
	
	function convertFromPassword(password) {
		p1 = this.enforceLetter(password[0]);
		p2 = this.enforceLetter(password[1]);
		p3 = this.enforceNumber(password[2]);
		p4 = this.enforceLetter(password[3]);
		
		if ('ABC'.contains(p1)) {
			if (Core.ord(p2) <= Core.ord('M')) {
				this.gravity = true;
			}
		}
		
		if ('BC'.contains(p1)) {
			value = Core.ord(p3) - Core.ord('1') + 1;
			// Core.print(value + Core.ord(p3));
			this.volcanoA = (value & 1) != 0;
			this.volcanoB = (value & 2) != 0;
			this.volcanoC = (value & 4) != 0;
		}
		
		if (p1 == 'C') {
			value = Core.ord(p4) - Core.ord('A') + 1;
			this.balloonA = (value & 1) != 0;
			this.balloonB = (value & 2) != 0;
			this.balloonC = (value & 4) != 0;
			this.balloonD = (value & 8) != 0;
		}
		
		this.lifemeter = START_LIFE;
		this.lives = START_LIVES;
	}
	
	function getCurrentCountAndType() {
		vcount = bool2Num(this.volcanoA) + bool2Num(this.volcanoB) + bool2Num(this.volcanoC);
		wcount = bool2Num(this.balloonA) + bool2Num(this.balloonB) + bool2Num(this.balloonC) + bool2Num(this.balloonD);
		if (this.gravity) {
			if (vcount == 3) {
				if (wcount == 4) {
					return null; // bird seed
				}
				return ['W', wcount];
			}
			return ['V', vcount];
		}
		return null; // gravity
	}
	
	function adjustHealth(scene, amount) {
		this.lifemeter += amount;
		if (this.lifemeter <= 0) {
			this.lifemeter = 0;
			scene.next = new DeathOverrideScene(scene, 'collapse');
		} else {
			if (amount < 0) {
				if (this.lifemeter < 4) {
					playNoise('low_health');
				} else {
					playNoise('get_hit');
				}
			} else {
				playNoise('raise_health');
			}
		}
		
		if (this.lifemeter > 10) {
			this.lifemeter = 10;
		}
	}
}
